[{"path":"https://joshwlambert.github.io/lifecycling/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 lifecycling authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/articles/comm_code_dev.html","id":"versioning","dir":"Articles","previous_headings":"","what":"Versioning","title":"Communicating development stages of open-source software","text":"Versioning code new concept used decades1. led version control systems git. However, post interested versioning communicate development.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/articles/comm_code_dev.html","id":"semantic-versioning","dir":"Articles","previous_headings":"Versioning","what":"Semantic versioning","title":"Communicating development stages of open-source software","text":"One philosophy semantic versioning (SemVer). aims describe stage software development attaching semantics (.e. meaning) format numbering versions. version system works three numbers, separated dot. numbers, left right, convey major version, minor version patch version. example, 0.5.2, newer 0.3.9. Employing semantic versioning ones code development allows others determine whether package undergone substantial development testing, informs whether make suitable package use script dependency another package. Semantic versioning also describes changes made package. explained website, incrementing major version implies breaking change, minor increment backwards compatible change lastly patches mostly applied bug fixes. aids users understanding whether continue using package, whether package needs updating due breaking change whether need install newest version bug recently fixed. R several packages work versioning, specifically semantic versioning. {semver} package provides functions parsing, rendering comparing versions. also {semverutils} R package provides similar functionality using R6. {usethis} package provides handy utility functions changing versions R packages (usethis::use_version() usethis::use_dev_version()). R also comes package_version() function creating validating versions. Overall sematic versioning provides describe “formal specification” facilitate management package development dependencies package. widely-used versioning system therefore understood wide variety users developers. critique raised semantic versioning difficulty defining changes correspond version increment. Semantic versioning states breaking changes warrant major releases, vast re-write code base may also justify major version change. Different breaking changes different magnitudes, therefore change single exported function change every exported function communicated single, equal, version increment.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/articles/comm_code_dev.html","id":"alternatives-to-seminatic-versioning","dir":"Articles","previous_headings":"Versioning","what":"Alternatives to seminatic versioning","title":"Communicating development stages of open-source software","text":"several versioning frameworks aside semantic versioning. One common option calendar versioning (CalVer). format CalVer usually year-month (YY-MM), year-month-day (YY-MM-DD), depending regularity releases, allows appending tags (micros modifiers, e.g. YY-MM.1). versioning schemes can appear similar semantic versioning, follow guidelines around version semantics. cases, bump major version may relate breaking changes. Additionally, numbers can attached traditional x.y.z format, build numbers. Build number versioning adds extra number specify build (x.y.z.build_number). many variants covering versioning systems outside scope post.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/articles/comm_code_dev.html","id":"versioning-an-r-package","dir":"Articles","previous_headings":"Versioning","what":"Versioning an R package","title":"Communicating development stages of open-source software","text":"restrictions version numbers can R packages. guidelines state: sequence least two (usually three) non-negative integers separated single ‘.’ ‘-’ characters.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/articles/comm_code_dev.html","id":"why-version","dir":"Articles","previous_headings":"Versioning","what":"Why version?","title":"Communicating development stages of open-source software","text":"benefits versioning apply beyond communicating users developers. Implementing versioning eases reproducibility allowing systems record version language package used. R can achieved several ways, popular examples {renv} package docker.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/articles/comm_code_dev.html","id":"lifecycle-badges","dir":"Articles","previous_headings":"","what":"Lifecycle badges","title":"Communicating development stages of open-source software","text":"Badges can pasted onto visible parts code, example readme document root repository, show development phase stability. three badging systems discuss post : RepoStatus Tidyverse lifecycles Reconverse lifecyles","code":""},{"path":"https://joshwlambert.github.io/lifecycling/articles/comm_code_dev.html","id":"repostatus","dir":"Articles","previous_headings":"Lifecycle badges","what":"RepoStatus","title":"Communicating development stages of open-source software","text":"RepoStatus language agnostic set badges describe stages code development possible transitions stages. shown figure , multiple stages communicate unstable stable software. also multiple paths stage, recognising varied routes software development can take. Reused CC -SA 4.0 repostatus.org","code":""},{"path":"https://joshwlambert.github.io/lifecycling/articles/comm_code_dev.html","id":"tidyverse","dir":"Articles","previous_headings":"Lifecycle badges","what":"Tidyverse","title":"Communicating development stages of open-source software","text":"tidyverse approach broadly similar RepoStatus. {lifecycle} R package contains description process. four stages: Experimental Stable Superseded (previously called retired) Deprecated code go experimental phase, likely change ’s API number order arguments might change. code going drastically change (.e. breaking changes), least users point view, can labelled stable. tidyverse lifecycle schematic, experimental code transitions stable code. two stages follow stable : superseded deprecated. former describes situation new package, new function new argument, depending context, developed developer feels used instead former, now superseded code. superseded code still developed sense changes language package may break function fixed well bug fixes, function received ongoing development. latter, deprecation, used cases developed think someone using code longer use package function. primarily employed code depended software therefore deleting code cause breaks reverse dependencies. Thus deprecation warning allows developers dependencies time make relevant changes. Reused MIT license lifecycles R package One main differences tidyverse lifecycles, compared others discussed posts applicability different levels code. lifecycle badges can applied package-level (e.g., stringr, function-level (e.g. dplyr::group_trim()) argument level (e.g., dplyr::across()). Using {lifecycle} package can setup using: {lifecycle} package provides badges, also informative deprecation notices communicate users function longer supported since version release package. offers user chance find alternative function future use. functions deprecated {lifecycle} return warning, soft deprecations. Alternatively function may become defunct, can deprecation produce error. use deprecation warnings {lifecycle} leads onto another aspect tidyverse development: protracted deprecation. fixed rules long deprecation warning made code removed. tidyverse, process given ample time order allow many developers utilise tidyverse software make necessary changes. Full descriptions {lifecycle} package can found pkgdown site, including deprecated use questioning maturing stages.","code":"usethis::use_lifecycle() dep_func() #> Warning: `dep_func()` was deprecated in lifecycling 0.1.0. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> [1] \"Deprecated function\" hard_dep_func() #> Error: #> ! `hard_dep_func()` was deprecated in lifecycling 0.1.0 and is now #>   defunct."},{"path":"https://joshwlambert.github.io/lifecycling/articles/comm_code_dev.html","id":"reconverse","dir":"Articles","previous_headings":"Lifecycle badges","what":"Reconverse","title":"Communicating development stages of open-source software","text":"similar {lifecycle} reconverse provides four stages software development: concept experimental maturing stable  difference {lifecycles} reconverse explicit connection semantic versioning development stage reconverse. transitions experimental, maturing stable linked versioning less 0.1.0, less 1.0.0 greater 1.0.0, respectively.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/articles/comm_code_dev.html","id":"dynamic-badges","dir":"Articles","previous_headings":"Lifecycle badges","what":"Dynamic badges","title":"Communicating development stages of open-source software","text":"badge frameworks discussed offer static badges require developers manually update project moved phases. subject maintainers remembering , can lead miscommunication package may move experimental, worked years active badge. Dynamics badges, like offered https://shields.io/ give good indication recently project changed showing time since last commit, number commits since last release. perfect may better track changes take burden badge updates project maintainer.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/articles/comm_code_dev.html","id":"communicating-development-in-the-epiverse-trace","dir":"Articles","previous_headings":"","what":"Communicating development in the Epiverse-TRACE","title":"Communicating development stages of open-source software","text":"Within Epiverse-TRACE initiative use semantic versioning badges convey community interacting code stage developement project . fixed rules badges use variety badges can found across repositories organisation. example reconverse badges used {linelist}, RepoStatus badge used {finalsize}, tidyverse badges used {epiparameter}. take approach lifecycle badging system perfect, benefits downsides. badges {lifecycle} common thus recognisable R package development, however may port well languages familiar developers coming R frameworks. RepoStatus benefit designed single language, ’s number badges gives greater acuity stage development project. may especially useful package newly developed {lifecycle} describe experimental, RepoStatus provides granularity whether concept package, work progress (WIP) started abandoned. ambiguity semantics active stage RepoStatus, definition “stable, usable state”, may misinterpreted unstable actively developed. Lastly reconverse provides system akin {lifecycle} may useful working epidemiology developer space. However, one downside reconverse system clear semantics package deprecated archived. almost code, point development ceases stage communicated, even just say package updated inline developments underlying language, case R. plans within Epiverse-TRACE develop new badging system existing systems cover almost use cases. event current development stage adequately communicated single badge one frameworks discussed, combination badges can used. example, early project adding experimental badge {lifecycle} reconverse WIP badge RepoStatus may accurately describe projects develop pace. Alternatively, stable , either {lifecycle} reconverse can coupled either Active Inactive RepoStatus let developers know software updated new language features dependency deprecations. Overall, use three lifecycle frameworks described better none.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua W. Lambert. Author, maintainer, copyright holder.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lambert J (2023). lifecycling: Explains semantic versioning lifecycles R. https://github.com/joshwlambert/lifecycling, https://joshwlambert.github.io/lifecycling/.","code":"@Manual{,   title = {lifecycling: Explains how semantic versioning and lifecycles in R},   author = {Joshua W. Lambert},   year = {2023},   note = {https://github.com/joshwlambert/lifecycling, https://joshwlambert.github.io/lifecycling/}, }"},{"path":"https://joshwlambert.github.io/lifecycling/index.html","id":"lifecycling-bicyclist-bicyclist-bicyclist","dir":"","previous_headings":"","what":"Explains how semantic versioning and lifecycles in R","title":"Explains how semantic versioning and lifecycles in R","text":"goal lifecycling demonstrate good practises communicating development code versioning lifecycle stages.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Explains how semantic versioning and lifecycles in R","text":"can install development version lifecycling GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"joshwlambert/lifecycling\")"},{"path":"https://joshwlambert.github.io/lifecycling/index.html","id":"lifecycles","dir":"","previous_headings":"","what":"Lifecycles","title":"Explains how semantic versioning and lifecycles in R","text":"three types lifecycle badges explored repo : tidyverse {lifecycle} reconverse lifecycles repostatus lifecycle badges available :","code":""},{"path":"https://joshwlambert.github.io/lifecycling/index.html","id":"lifecycle","dir":"","previous_headings":"Lifecycles","what":"{lifecycle}","title":"Explains how semantic versioning and lifecycles in R","text":"","code":"- lifecycle::badge(\"experimental\") - lifecycle::badge(\"stable\") - lifecycle::badge(\"superseded\") - lifecycle::badge(\"deprecated\")"},{"path":[]},{"path":[]},{"path":"https://joshwlambert.github.io/lifecycling/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Explains how semantic versioning and lifecycles in R","text":"basic example shows solve common problem:","code":"library(lifecycling)  # basic demonstration of functions from {lifecycle}:  expe_func() #> [1] \"lifecycles\" dep_func() #> Warning: `dep_func()` was deprecated in lifecycling 0.1.0. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> [1] \"Deprecated function\" soft_dep_func() #> Warning: `soft_dep_func()` was deprecated in lifecycling 0.1.0. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> [1] \"Deprecated function\" hard_dep_func() #> Error: #> ! `hard_dep_func()` was deprecated in lifecycling 0.1.0 and is now #>   defunct. sup_func() #> [1] \"lifecycles\""},{"path":[]},{"path":"https://joshwlambert.github.io/lifecycling/reference/dep_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Template function to demonstrate lifecycle badges — dep_func","text":"","code":"dep_func(x, y, z, ...)"},{"path":"https://joshwlambert.github.io/lifecycling/reference/dep_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Template function to demonstrate lifecycle badges — dep_func","text":"x Placeholder argument y Placeholder argument z Placeholder argument ... Adding arguments ellipsis longer supported.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/reference/dep_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Template function to demonstrate lifecycle badges — dep_func","text":"Nothing, called printing side-effect.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/reference/dep_func.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Template function to demonstrate lifecycle badges — dep_func","text":"","code":"dep_func() #> Warning: `dep_func()` was deprecated in lifecycling 0.1.0. #> [1] \"Deprecated function\""},{"path":[]},{"path":"https://joshwlambert.github.io/lifecycling/reference/expe_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Template function to demonstrate lifecycle badges — expe_func","text":"","code":"expe_func(x, y, z, ...)"},{"path":"https://joshwlambert.github.io/lifecycling/reference/expe_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Template function to demonstrate lifecycle badges — expe_func","text":"x Placeholder argument y Placeholder argument z Placeholder argument ... Extra arguments passed function","code":""},{"path":"https://joshwlambert.github.io/lifecycling/reference/expe_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Template function to demonstrate lifecycle badges — expe_func","text":"Nothing, called printing side-effect.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/reference/expe_func.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Template function to demonstrate lifecycle badges — expe_func","text":"","code":"foo() #> [1] \"lifecycles\""},{"path":[]},{"path":"https://joshwlambert.github.io/lifecycling/reference/foo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Template function to demonstrate lifecycle badges — foo","text":"","code":"foo(x, y, z, ...)"},{"path":"https://joshwlambert.github.io/lifecycling/reference/foo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Template function to demonstrate lifecycle badges — foo","text":"x Placeholder argument y Placeholder argument z Placeholder argument ... Extra arguments passed function","code":""},{"path":"https://joshwlambert.github.io/lifecycling/reference/foo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Template function to demonstrate lifecycle badges — foo","text":"Nothing, called printing side-effect.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/reference/foo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Template function to demonstrate lifecycle badges — foo","text":"","code":"foo() #> [1] \"lifecycles\""},{"path":[]},{"path":"https://joshwlambert.github.io/lifecycling/reference/hard_dep_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Template function to demonstrate lifecycle badges — hard_dep_func","text":"","code":"hard_dep_func(x, y, z, ...)"},{"path":"https://joshwlambert.github.io/lifecycling/reference/hard_dep_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Template function to demonstrate lifecycle badges — hard_dep_func","text":"x Placeholder argument y Placeholder argument z Placeholder argument ... Extra arguments passed function","code":""},{"path":"https://joshwlambert.github.io/lifecycling/reference/hard_dep_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Template function to demonstrate lifecycle badges — hard_dep_func","text":"Nothing, called printing side-effect.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/reference/hard_dep_func.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Template function to demonstrate lifecycle badges — hard_dep_func","text":"","code":"# function is designed to error so example is wrapped in a tryCatch() tryCatch(   hard_dep_func(),   error = function(cnd) message(\"expected error\") ) #> expected error"},{"path":"https://joshwlambert.github.io/lifecycling/reference/lifecycling-package.html","id":null,"dir":"Reference","previous_headings":"","what":"lifecycling: Explains how semantic versioning and lifecycles in R — lifecycling-package","title":"lifecycling: Explains how semantic versioning and lifecycles in R — lifecycling-package","text":"package acts demonstration use semantic versioning lifecycle badges different badge frameworks communicate open-source software development community.","code":""},{"path":[]},{"path":"https://joshwlambert.github.io/lifecycling/reference/lifecycling-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"lifecycling: Explains how semantic versioning and lifecycles in R — lifecycling-package","text":"Maintainer: Joshua W. Lambert joshua.lambert@lshtm.ac.uk (ORCID) [copyright holder]","code":""},{"path":[]},{"path":"https://joshwlambert.github.io/lifecycling/reference/soft_dep_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Template function to demonstrate lifecycle badges — soft_dep_func","text":"","code":"soft_dep_func(x, y, z, ...)"},{"path":"https://joshwlambert.github.io/lifecycling/reference/soft_dep_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Template function to demonstrate lifecycle badges — soft_dep_func","text":"x Placeholder argument y Placeholder argument z Placeholder argument ... Extra arguments passed function","code":""},{"path":"https://joshwlambert.github.io/lifecycling/reference/soft_dep_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Template function to demonstrate lifecycle badges — soft_dep_func","text":"Nothing, called printing side-effect.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/reference/soft_dep_func.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Template function to demonstrate lifecycle badges — soft_dep_func","text":"","code":"soft_dep_func() #> Warning: `soft_dep_func()` was deprecated in lifecycling 0.1.0. #> [1] \"Deprecated function\""},{"path":[]},{"path":"https://joshwlambert.github.io/lifecycling/reference/sup_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Template function to demonstrate lifecycle badges — sup_func","text":"","code":"sup_func(x, y, z, ...)"},{"path":"https://joshwlambert.github.io/lifecycling/reference/sup_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Template function to demonstrate lifecycle badges — sup_func","text":"x Placeholder argument y Placeholder argument z Placeholder argument ... Extra arguments passed function","code":""},{"path":"https://joshwlambert.github.io/lifecycling/reference/sup_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Template function to demonstrate lifecycle badges — sup_func","text":"Nothing, called printing side-effect.","code":""},{"path":"https://joshwlambert.github.io/lifecycling/reference/sup_func.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Template function to demonstrate lifecycle badges — sup_func","text":"","code":"sup_func() #> [1] \"lifecycles\""}]
